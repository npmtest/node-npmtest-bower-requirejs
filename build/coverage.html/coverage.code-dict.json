{"/home/travis/build/npmtest/node-npmtest-bower-requirejs/test.js":"/* istanbul instrument in package npmtest_bower_requirejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bower-requirejs/lib.npmtest_bower_requirejs.js":"/* istanbul instrument in package npmtest_bower_requirejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bower_requirejs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bower_requirejs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bower-requirejs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bower-requirejs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bower_requirejs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bower_requirejs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bower_requirejs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bower_requirejs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bower_requirejs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bower_requirejs.__dirname + '/lib.npmtest_bower_requirejs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bower-requirejs/node_modules/bower-requirejs/lib/index.js":"'use strict';\nvar path = require('path');\nvar fs = require('fs');\nvar bower = require('bower');\nvar file = require('file-utils');\nvar requirejs = require('requirejs/bin/r.js');\nvar _ = require('lodash');\nvar assign = require('object-assign');\nvar chalk = require('chalk');\nvar success = chalk.green;\nvar danger = chalk.black.bgRed;\nvar buildConfig = require('./build-config');\n\n/**\n * Convert bower dependencies into paths for\n * RequireJS config file\n */\nmodule.exports = function (opts, done) {\n  opts = opts || {};\n\n  var bowerOpts = _.extend({offline: true}, opts.bowerOpts);\n\n  var configDir;\n  var config;\n  var baseUrl = opts.baseUrl;\n  var configPath = opts.config;\n\n  if (configPath) {\n    configDir = path.dirname(configPath);\n    baseUrl = baseUrl || configDir;\n\n    // Grab the config file, or create one if it doesn't exist\n    if (file.exists(configPath)) {\n      config = fs.readFileSync(String(configPath), 'utf8');\n    } else {\n      config = fs.readFileSync(path.join(__dirname, '../templates/config.js'), 'utf8');\n    }\n  } else {\n    baseUrl = baseUrl || './';\n  }\n\n  if (!done) {\n    done = function () {};\n  }\n\n  function run() {\n    bower.commands.list({}, bowerOpts)\n      .on('end', function (dependencyGraph) {\n        if (dependencyGraph) {\n          var generatedConfig;\n\n          try {\n            generatedConfig = buildConfig(dependencyGraph, _.extend(opts, {\n              baseUrl: baseUrl\n            }));\n          } catch (err) {\n            return done(false);\n          }\n\n          if (configPath) {\n            writeConfig(generatedConfig);\n          } else {\n            done(generatedConfig);\n          }\n        }\n      })\n      .on('error', function (err) {\n        console.error(danger('ERR'), process.argv.slice(2).join(' '), '\\n');\n        console.error(opts.debug ? err.stack : err.message);\n        process.exit(err.code || 1);\n      });\n  }\n\n  /**\n   * Write all dependencies to rjs config file\n   */\n  // @TODO: should maybe make this 'mergeConfig'?\n  function writeConfig(generatedConfig) {\n    var rjsConfig;\n    requirejs.tools.useLib(function (require) {\n      rjsConfig = require('transform').modifyConfig(config, function (config) {\n\n        // If the original config defines paths, add the\n        // bower component paths to it; otherwise, add a\n        // paths map with the bower components.\n        // @TODO: CHECK FOR CONFLICTS WITH EXISTING PATHS\n        if (generatedConfig.paths) {\n          if (config.paths) {\n            assign(config.paths, generatedConfig.paths);\n          } else {\n            config.paths = generatedConfig.paths;\n          }\n        }\n\n        // Add packages to merged config.\n        if (generatedConfig.packages) {\n          if (!config.packages) {\n            config.packages = [];\n          }\n\n          // strip packages that are already added\n          var generatedPackages = _.filter(generatedConfig.packages, function(pkg) {\n            return typeof _.find(config.packages, function(installedPkg) {\n                return installedPkg.name === pkg.name;\n              }) === 'undefined';\n          });\n\n          config.packages = config.packages.concat(generatedPackages);\n        }\n\n        if (generatedConfig.shim) {\n          if (config.shim) {\n            _.forOwn(generatedConfig.shim, function (value, key) {\n              if (config.shim[key]) {\n                config.shim[key].deps = _.union(value.deps, config.shim[key].deps);\n              } else {\n                config.shim[key] = value;\n              }\n            });\n          } else {\n            config.shim = generatedConfig.shim;\n          }\n        }\n\n        return config;\n      });\n\n      fs.writeFileSync(configPath, rjsConfig, 'utf-8');\n      console.log(success('Updated RequireJS config with installed Bower components'));\n\n      done(generatedConfig);\n    });\n  }\n\n  run();\n};\n","/home/travis/build/npmtest/node-npmtest-bower-requirejs/node_modules/bower-requirejs/lib/build-config.js":"'use strict';\nvar _ = require('lodash');\nvar assign = require('object-assign');\nvar parse = require('./parse');\n\n\n/**\n * Build requirejs config object from bower dependencies object.\n */\nmodule.exports = function (dependencyGraph, opts) {\n  opts = opts || {};\n  var exclude = opts.exclude || [];\n  var baseUrl = opts.baseUrl || '';\n  var overrides = dependencyGraph.pkgMeta.overrides;\n\n  // Override the main property of each direct dependency.\n  if (overrides) {\n    _.forOwn(overrides, function (dep, name) {\n      if (dep.main) {\n        var main = (typeof dep.main === 'string') ? dep.main.trim() : dep.main;\n        var dependency = dependencyGraph.dependencies[name];\n        if (dependency && main) {\n          dependency.pkgMeta.main = main;\n        }\n      }\n    });\n  }\n\n  // #84 exclude devDependencies\n  if (opts['exclude-dev']) {\n    exclude = _.chain(dependencyGraph.pkgMeta.devDependencies || {})\n      .reduce(function(exclude,val,key){\n        exclude.push(key);\n        return exclude;\n      },exclude).uniq().value();\n  }\n\n  var dependencies = {};\n  // Recursively register dependencies if transitive option is specified.\n  if (opts.transitive) {\n    var registerTransitiveDependencies = function (node) {\n      if (node.dependencies) {\n        _.forOwn(node.dependencies, function (dep, name) {\n          if (!_.has(dependencies, name)) {\n            dependencies[name] = dep;\n            registerTransitiveDependencies(dep);\n          }\n        });\n      }\n    };\n    registerTransitiveDependencies(dependencyGraph);\n  } else {\n    // Otherwise just use top-level dependencies.\n    dependencies = dependencyGraph.dependencies;\n  }\n\n  var config = {\n    shim: {},\n    paths: {},\n    packages: []\n  };\n\n  _.forOwn(dependencies, function (dep, name) {\n    if (exclude.indexOf(name) !== -1) {\n      return;\n    }\n\n    var configElement = parse(dep, name, baseUrl);\n    if (configElement) {\n      if (configElement.paths) {\n        assign(config.paths, configElement.paths);\n        if (opts.shim) {\n          var deps = _.difference(Object.keys(dep.dependencies), exclude);\n          if (!opts.transitive) {\n            deps = _.intersection(Object.keys(dependencies), deps);\n          }\n          if (deps.length) {\n            config.shim[name] = { deps: deps };\n          }\n        }\n      }\n      if (configElement.package) {\n        config.packages.push(configElement.package);\n      }\n    }\n  });\n\n  return config;\n};\n","/home/travis/build/npmtest/node-npmtest-bower-requirejs/node_modules/bower-requirejs/lib/parse.js":"'use strict';\nvar path = require('path');\nvar _ = require('lodash');\nvar slash = require('slash');\nvar assign = require('object-assign');\nvar slice = Array.prototype.slice;\nvar chalk = require('chalk');\nvar warn = chalk.black.bgYellow;\nvar danger = chalk.black.bgRed;\nvar primary = require('./primary');\n\n/**\n * Parse bower dependency down to one or more primary\n * js files.\n */\nmodule.exports = function (dep, name, baseUrl) {\n\n  /**\n   * Fixup slashes in file paths for windows\n   */\n  function normalizePath(str) {\n    return process.platform === 'win32' ? slash(str) : str;\n  }\n\n  function parsePackage(dep, name) {\n    var main =  dep.pkgMeta.main || 'main.js';\n\n    if (dep.missing) {\n      console.error(danger('ERR'), dep.endpoint.name, 'is not installed in your bower components directory');\n      throw new Error('Missing dependency');\n    }\n\n    var configElement = {\n      type: 'package',\n      package: {\n        name: name,\n        main: main\n      }\n    };\n    return configElement;\n  }\n\n  function parsePaths(dep, name, baseUrl) {\n    var canonicalDir = dep.canonicalDir;\n    var main;\n\n    if (dep.pkgMeta.main) {\n      var pkgMain = dep.pkgMeta.main;\n      if (!Array.isArray(pkgMain)) {\n        pkgMain = [pkgMain];\n      }\n      main = _.filter(pkgMain, function (dep) {\n        var extname = path.extname(dep);\n        return !extname || extname === '.js';\n      });\n    }\n\n    /**\n     * Get resolved paths for dependency.\n     */\n    function getResolvedPaths() {\n      // If no `main` is listed in the bower.json\n      if (!main) {\n        // Look for top level js, otherwise\n        // bail out.\n        main = primary(name, dep);\n        if (!main) {\n          return false;\n        }\n      }\n\n      // If main should be turned into an Array\n      if (Array.isArray(main)) {\n        dep = main;\n      } else {\n        dep = [main];\n      }\n\n      // If there are multiple files filter to\n      // only the js ones\n      if (dep.length > 1) {\n        dep = filter(dep);\n      }\n\n      var resolvedPaths = {};\n      var resolve = resolver(resolvedPaths);\n      _.each(dep, resolve);\n      return resolvedPaths;\n    }\n\n    /**\n     * Filter an Array down to only js files\n     */\n    function filter(arr) {\n      var jsfiles = _.filter(arr, function (val) {\n        return path.extname(val) === '.js';\n      });\n\n      return jsfiles;\n    }\n\n    /**\n     * Disambiguate a dependency path if a dependency was\n     * not explicitly listed in bower.json's main array\n     * Some dependencies have multiple paths because there is more\n     * than one .js file in bower.json's main attribute.\n     */\n    function resolver(dependencies) {\n      return function (val, index, arr) {\n        if (arr.length > 1) {\n          assign(dependencies, dependencyByFilename(val));\n        } else {\n          assign(dependencies, dependencyByComponentName(name, val));\n        }\n      };\n    }\n\n    /**\n     * Create dependency based off of filename\n     */\n    function dependencyByFilename(val) {\n      var dep = {};\n      var name = getName(path.basename(val));\n      var filepath = getPath(val);\n      dep[name] = filepath;\n      return dep;\n    }\n\n    /**\n     * Create dependency based off of component name\n     */\n    function dependencyByComponentName(componentName, val) {\n      var dep = {};\n      var name = getName(componentName);\n      var filepath = getPath(val);\n      dep[name] = filepath;\n      return dep;\n    }\n\n    /**\n     * Return a dependency name that strips out extensions\n     * like .js or .min\n     */\n    function getName(name) {\n      return filterName(name, 'js', 'min');\n    }\n\n    /**\n     * Return a dependency path that is relative to the baseUrl\n     * and has normalized slashes for Windows users\n     */\n    function getPath(val) {\n      var filepath = relative(canonical(removeExtension(val, 'js')));\n      filepath = normalizePath(filepath);\n      return filepath;\n    }\n\n    /**\n     * Remove extensions from file paths but ignore folders\n     */\n    function removeExtension(filepath, extension) {\n      var newPath;\n      if (extension[0] !== '.') {\n        extension = '.'.concat(extension);\n      }\n      newPath = path.join(path.dirname(filepath), path.basename(filepath, extension));\n      return newPath;\n    }\n\n    /**\n     * Remove '.' separated extensions from library/file names\n     * ex: filterName('typeahead.js', 'js') returns 'typeahead'\n     * ex: filterName('foo.min.js', 'js, 'min') returns 'foo'\n     */\n    function filterName() {\n      var oldName = arguments[0];\n      var newName = _.difference(oldName.split('.'), slice.call(arguments, 1));\n\n      // Re-attach any leftover pieces\n      // ex: handlebars.runtime.js becomes handlebars.runtime\n      if (newName.length > 1) {\n        newName = newName.join('.');\n      } else {\n        newName = newName[0];\n      }\n\n      if (newName !== oldName) {\n        console.log(warn('WARN'), 'Renaming ' + oldName + ' to ' + newName + '\\n');\n      }\n\n      return newName;\n    }\n\n    /**\n     * Combine the main.js file with its canonicalDir to\n     * produce a full file path\n     */\n    function canonical(filepath) {\n      return path.join(canonicalDir, filepath);\n    }\n\n    /**\n     * Generate a relative path name using the baseUrl. If\n     * baseUrl was not defined then it will just use the dir\n     * that contains the rjs config file.\n     */\n    function relative(filepath) {\n      return path.relative(baseUrl, filepath);\n    }\n\n    var resolvedPaths = getResolvedPaths();\n    var configElement = {\n      type: 'paths',\n      paths: resolvedPaths\n    };\n\n    return configElement;\n  }\n\n  // Check for module type.\n  var moduleTypes = dep.pkgMeta.moduleType || [];\n  var canSupportNode = moduleTypes.indexOf('node') !== -1;\n  var canSupportAmd = moduleTypes.indexOf('amd') !== -1;\n  if (canSupportNode && !canSupportAmd) {\n    return parsePackage(dep, name);\n  }\n\n  // Parse as paths if not package.\n  return parsePaths(dep, name, baseUrl);\n\n};\n","/home/travis/build/npmtest/node-npmtest-bower-requirejs/node_modules/bower-requirejs/lib/primary.js":"'use strict';\nvar path = require('path');\nvar slash = require('slash');\nvar _ = require('lodash');\nvar chalk = require('chalk');\nvar warn = chalk.black.bgYellow;\nvar file = require('file-utils');\nvar path = require('path');\n\n/**\n * Find primary js file in directory if no bower.json\n * exists.\n */\nmodule.exports = function (name, dep, opts) {\n\n  opts = opts || {};\n\n  // Define extra search dirs, relatie to canonicalDir.\n  // Default is to add 'dist' folder (e.g. for jquery).\n  // canonialDir is included as first searchDir.\n  var extraSearchDirs = opts.extraSearchDirs || ['dist'];\n  var searchDirs = [''].concat(extraSearchDirs);\n\n  /**\n   * Fixup slashes in file paths for windows\n   */\n  function normalizePath(str) {\n    return process.platform === 'win32' ? slash(str) : str;\n  }\n\n  /**\n   * If we find any Gruntfiles, remove them and log a warning.\n   */\n  function excludeGrunt() {\n    if (_.contains(main, 'grunt.js') || _.contains(main, 'Gruntfile.js')) {\n      console.log(warn('WARN'), 'Ignoring Gruntfile in ' + name);\n      console.log('You should inform the author to ignore this file in their bower.json\\n');\n      main = _.without(main, 'grunt.js', 'Gruntfile.js');\n    }\n    return main;\n  }\n\n  /**\n   * Test for candidate files in search dirs.\n   */\n  function findCandidateFile(candidateFile) {\n    var searches = _.map(searchDirs, function (searchDir) {\n      return function () {\n        var candidatePath = path.join(searchDir, candidateFile);\n        if (_.contains(main, candidatePath)) {\n          main = [candidatePath];\n        }\n      };\n    });\n    until(primaryFound, searches, function () {});\n  }\n\n  /**\n   * Look for a primary .js file based on the project name\n   * ex: backbone.js inside backbone dir\n   */\n  function findByDirname() {\n    var candidateFile = path.basename(dep.canonicalDir) + '.js';\n    findCandidateFile(candidateFile);\n  }\n\n  /**\n   * Look for a primary .js file based on the project name minus 'js'\n   * ex: require.js inside requirejs dir\n   */\n  function findByDirnameSuffix() {\n    var candidateFile = path.basename(dep.canonicalDir).replace(/js$/, '') + '.js';\n    findCandidateFile(candidateFile);\n  }\n\n  /**\n   * Look for primary .js file in package.json\n   */\n  function findByPackage() {\n    var pkgPath = path.join(dep.canonicalDir, 'package.json');\n    if (file.exists(pkgPath)) {\n      var pkg = file.readJSON(pkgPath);\n\n      if (pkg.main) {\n        main = [pkg.main];\n      }\n    }\n  }\n\n  /**\n   * Execute callbacks in order until test passes or\n   * we run out of callbacks\n   */\n  function until(test, callbacks, done) {\n    for (var i = 0; i < callbacks.length; i++) {\n      if (test()) {\n        break;\n      } else {\n        callbacks[i].call();\n      }\n    }\n\n    done();\n  }\n\n  /**\n   * Test if only one js file remains\n   */\n  function primaryFound() {\n    return main.length === 1;\n  }\n\n  /**\n   * If a top level js file is found set that to the return\n   * value. Otherwise return false to indicate a failure\n   */\n  function end() {\n    if (primaryFound()) {\n      dep = main[0];\n    } else {\n      dep = false;\n    }\n  }\n\n  // Put all js files in search dirs into an array\n  var main = [];\n  _.each(searchDirs, function (searchDir) {\n    var searchPath = path.join(dep.canonicalDir, searchDir);\n    var candidateFiles = file.expand({ cwd: normalizePath(searchPath)}, '*.js', '!*.min.js');\n    _.each(candidateFiles, function (candidateFile) {\n      main.push(normalizePath(path.join(searchDir, candidateFile)));\n    });\n  });\n\n  // Remove any Gruntfiles\n  excludeGrunt();\n\n  // Call find functions until test passes or\n  // we run out of functions\n  until(primaryFound, [\n    findByDirname,\n    findByDirnameSuffix,\n    findByPackage\n  ], end);\n\n  return dep;\n};\n","/home/travis/build/npmtest/node-npmtest-bower-requirejs/node_modules/bower-requirejs/bin/bower-requirejs.js":"#!/usr/bin/env node\n'use strict';\nvar nopt = require('nopt');\nvar path = require('path');\nvar sudoBlock = require('sudo-block');\nvar updateNotifier = require('update-notifier');\nvar pkg = require('../package.json');\nvar project = require('../lib');\n\nvar opts = nopt({\n  help: Boolean,\n  version: Boolean,\n  config: path,\n  exclude: Array,\n  'base-url': path,\n  baseUrl: path, // alias for --base-url\n  transitive: Boolean,\n  shim: Boolean,\n  'exclude-dev': Boolean\n}, {\n  h: '--help',\n  v: '--version',\n  c: '--config',\n  e: '--exclude',\n  b: '--base-url',\n  t: '--transitive',\n  s: '--shim',\n  d: '--exclude-dev'\n});\n\nif (opts['base-url']) {\n  opts.baseUrl = opts['base-url'];\n}\n\nfunction init() {\n  project(opts);\n}\n\nfunction help() {\n  var out = [\n    'Usage: bower-requirejs [options]',\n    '',\n    'General options:',\n    '  -h, --help              # Print options and usage',\n    '  -v, --version           # Print the version number',\n    '  -c, --config            # Path to your RequireJS config file',\n    '  -e, --exclude           # Name of a dependency to be excluded from the process',\n    '  -b, --base-url          # Path which all dependencies will be relative to',\n    '  -t, --transitive        # Process transitive dependencies',\n    '  -s, --shim              # Shim dependencies',\n    '  -d, --exclude-dev       # Exclude devDependencies',\n    ''\n  ];\n\n  return out.join('\\n');\n}\n\nfunction pre() {\n  if (opts.version) {\n    return console.log(pkg.version);\n  }\n\n  if (opts.help) {\n    return console.log(help());\n  }\n\n  init();\n}\n\nif (opts['update-notifier'] !== false) {\n  updateNotifier({pkg: pkg}).notify();\n}\n\nsudoBlock();\npre();\n","/home/travis/build/npmtest/node-npmtest-bower-requirejs/node_modules/bower-requirejs/templates/config.js":"require.config({\n  shim: {},\n  paths: {}\n});\n"}